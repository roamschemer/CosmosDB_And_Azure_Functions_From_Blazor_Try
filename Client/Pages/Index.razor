@page "/"
@inject HttpClient http

@if (persons == null) {
	<p><em>Loading...</em></p>
} else {
	@foreach (var person in persons) {
		<BSCard CardType="CardType.Card">
			<BSCard CardType="CardType.Header">
				@person.Name
			</BSCard>
			<BSCard CardType="CardType.Body">
				<BSCard CardType="CardType.Title">@person.Job</BSCard>
				<BSCard CardType="CardType.Group">
					@foreach (var item in person.Items) {
						<BSCard CardType="CardType.Card">
							<BSCard CardType="CardType.Body">
								<BSCard CardType="CardType.Title">@item.Name</BSCard>
								<BSCard CardType="CardType.Subtitle">@item.Content</BSCard>
							</BSCard>
						</BSCard>
					}
				</BSCard>
				<BSButton Color="BSColor.Primary" @onclick="@(s => UpdatePerson(person))">Update</BSButton>
				<BSButton Color="BSColor.Primary" @onclick="@(s => DeletePerson(person))">Delete</BSButton>
			</BSCard>
		</BSCard>
	}
}

@code {
	private List<Person> persons { get; set; } = new();
	private async Task UpdatePerson(Person person) {

	}
	private async Task PersonCreate() {

	}
	private async Task DeletePerson(Person person) {
		await http.DeleteAsync($"api/person/{person.Job}/{person.Id}");
		await GetPersons();
	}
	private async Task GetPersons() {
		persons = await http.GetFromJsonAsync<List<Person>>("api/person");
	}

	protected override async Task OnInitializedAsync() {
		await GetPersons();
	}
}